{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x00C74eD067Cea48F1D6F7D00aBABa3C1D5B2598b",
    "txHash": "0x153101ff6a0e9f5b8eb6ffcacea1b80bea88652b32e41a78937842f82bf0ed7d"
  },
  "proxies": [
    {
      "address": "0x4f4cC63D7f2bC894078d41f284453062842Afa46",
      "txHash": "0xc5113eb9fc63e4ffde7238ba9900185a72eaa338903b3e04636ed63aa95e08b4",
      "kind": "transparent"
    },
    {
      "address": "0x6F6Cdf267F98eDF9a098864B91A114fD03623462",
      "txHash": "0xee7dbabd0a0d337b8125cb76b676dc80915fa98ced2358c526b8e3b03172ff8f",
      "kind": "transparent"
    },
    {
      "address": "0x3049455cdA17beE43d61090Ec344624aeda72Ed6",
      "txHash": "0xbedd900d357b0a2bb391007a9b0f07e1565e3dacde3170ceb96cf81eacf2390c",
      "kind": "transparent"
    },
    {
      "address": "0x41407B447Fb5425187A9BCA3a062644EF2410F8D",
      "txHash": "0xdceb5ea598ac40ac5b6b2b2bb74995949100c940ce61343085aa6ab45494a654",
      "kind": "transparent"
    },
    {
      "address": "0x927b8510Bf3108BF35aD6d60316C2f8dAB1BCD9A",
      "txHash": "0x9461a8f8160c38571155635266fb5a6a7e44d45fca9686883914815e58e5ca32",
      "kind": "transparent"
    },
    {
      "address": "0xB4D34a10921347877B0AA7A9DB347871b20b19F5",
      "txHash": "0xeb7e5de7120fd1b8c371d11da158d63218eead8ca6274fdcf0aba4fcb9951579",
      "kind": "transparent"
    },
    {
      "address": "0x0dE3015b646C40A0B72603A08558F74AB35084bA",
      "txHash": "0xada765ca3395030b547440068a518954302875717a5a5d358e1772502a6a6ee7",
      "kind": "transparent"
    }
  ],
  "impls": {
    "9daa2de0be55235e53ea65391ac057d3bac9177c851ee45aab59e1ee9e54c3bd": {
      "address": "0xD1f689646861870D44B33dBBb413Fa7D06A2B52f",
      "txHash": "0xcef04920efc6b3e06fff798f2f894002fc1c03d9aa491c4e94610258a19cff75",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByTokenAndTokenId",
            "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)15256_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:29"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByToken",
            "type": "t_mapping(t_address,t_struct(RoyaltiesSet)15256_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:31"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesProviders",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:33"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:250"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(RoyaltiesSet)15256_storage)": {
            "label": "mapping(bytes32 => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoyaltiesSet)15256_storage": {
            "label": "struct RoyaltiesRegistry.RoyaltiesSet",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "royalties",
                "type": "t_array(t_struct(Part)14548_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Part)14548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_address,t_struct(RoyaltiesSet)15256_storage)": {
            "label": "mapping(address => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3c7276b9127b9efad7eb7eed26a7cb53bf19a65b9458c6dcd18a692806ca899b": {
      "address": "0xD703958825feAB56F9c7DD3906149C20416497E4",
      "txHash": "0x8aebb4f578b02f000d367fe78c5d2c9d29f201245f332ab4e9ca219b9bd86778",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:8"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:20"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BurnableUpgradeable.sol:41"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:14"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:69"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:20"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:21"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:22"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:150"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:89"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:54"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "3ebb4bfbdfb28399aed5a83312f789c875713204b188f4cc56325c316dd646b4": {
      "address": "0xd786eBeD505D010D4f8127Cd825511E887c65A2A",
      "txHash": "0x9825ec388088e46e157e9ed02e98929f83ea21a3bb85156ec6a1adf2691ab942",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)3205_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2582_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:56"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:93"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:495"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:8"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:23"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:116"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Base.sol:38"
          },
          {
            "contract": "ERC721Rarible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Rarible.sol:34"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)3205_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)3205_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2819_storage"
              }
            ]
          },
          "t_struct(Set)2819_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2582_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)2264_storage"
              }
            ]
          },
          "t_struct(Map)2264_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)2256_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)2256_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)2256_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "5ab6de2c5f916c3d64e33b3a2c45e885a08df04fd6fe31273c9b8906cb1a5e26": {
      "address": "0xe10605b2026884aCc669C2A9Cd4A5ec5f5FFf494",
      "txHash": "0xed548fcf8889fad1a28da2b7d74b1f4b0126a01aba50f95bec524b3a25102835",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AssetMatcher",
            "label": "matchers",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:13"
          },
          {
            "contract": "AssetMatcher",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:77"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/exchange-v2/contracts/OrderValidator.sol:50"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "fills",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:23"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:442"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)8249",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:28"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:260"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IRoyaltiesProvider)8249": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "71df619d8fb471c6f83e61edd9c543b758d36ed998f3102e4c912ff78a89ed07": {
      "address": "0x509FD4cdAa29Be7B1fAD251d8Ea0fCA2Ca91eb60",
      "txHash": "0x34796b44fb1576db236dec6b5cb7dfd85b6243e0e3a516c0d8dfced2f3aabb7f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:23"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:26"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:29"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:32"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:35"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:38"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:66"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)43_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:443"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:8"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BurnableUpgradeableMinimal.sol:41"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721URI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:19"
          },
          {
            "contract": "ERC721URI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:22"
          },
          {
            "contract": "ERC721URI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:92"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:23"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:114"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721BaseMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BaseMinimal.sol:45"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:54"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14548_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)43_storage": {
            "label": "uint256[43]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "fc3e034d39978d629fc1bd1920b748ce8508b5898ac6eec2fc330a21bc5e33cc": {
      "address": "0x51929e5710D9cef0EB0388b7866dF20a4598dF26",
      "txHash": "0xbddde932dc3493cc7f4b5ea2c746b7929adde409c6274d13c18b1db9e38a1ea3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "TokenToAuction",
            "label": "tokenToAuctionId",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@rarible/auction/contracts/wrapper/TokenToAuction.sol:7"
          },
          {
            "contract": "TokenToAuction",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/wrapper/TokenToAuction.sol:24"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)8249",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:28"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:260"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "readyToWithdraw",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:32"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "auctionId",
            "type": "t_uint256",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:35"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalDuration",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:38"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalStepBasePoint",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:41"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:290"
          },
          {
            "contract": "AuctionHouseBase721",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)6827_storage)",
            "src": "../@rarible/auction/contracts/721/AuctionHouseBase721.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Auction)6827_storage)": {
            "label": "mapping(uint256 => struct AuctionHouseBase721.Auction)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Auction)6827_storage": {
            "label": "struct AuctionHouseBase721.Auction",
            "members": [
              {
                "label": "sellToken",
                "type": "t_address"
              },
              {
                "label": "sellTokenId",
                "type": "t_uint256"
              },
              {
                "label": "buyAsset",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint96"
              },
              {
                "label": "lastBid",
                "type": "t_struct(Bid)6889_storage"
              },
              {
                "label": "seller",
                "type": "t_address_payable"
              },
              {
                "label": "minimalPrice",
                "type": "t_uint96"
              },
              {
                "label": "buyer",
                "type": "t_address_payable"
              },
              {
                "label": "protocolFee",
                "type": "t_uint64"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_struct(Bid)6889_storage": {
            "label": "struct AuctionHouseBase.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(IRoyaltiesProvider)8249": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f560774dd0c20a4855954e083eafd16ec691e0fffd690631ac57072d706e7ce9": {
      "address": "0xAe24914A2Ab3c3b10A04F4041A1f3bf7d6075a27",
      "txHash": "0x9a9c5f111bd1a2b712f305befe0ed2c59f42d16fe20393bea8eece60852700c2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)8249",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:28"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:260"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "readyToWithdraw",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:32"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "auctionId",
            "type": "t_uint256",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:35"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalDuration",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:38"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalStepBasePoint",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:41"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:290"
          },
          {
            "contract": "AuctionHouseBase1155",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)5760_storage)",
            "src": "../@rarible/auction/contracts/1155/AuctionHouseBase1155.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Auction)5760_storage)": {
            "label": "mapping(uint256 => struct AuctionHouseBase1155.Auction)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Auction)5760_storage": {
            "label": "struct AuctionHouseBase1155.Auction",
            "members": [
              {
                "label": "sellToken",
                "type": "t_address"
              },
              {
                "label": "sellTokenValue",
                "type": "t_uint96"
              },
              {
                "label": "sellTokenId",
                "type": "t_uint256"
              },
              {
                "label": "buyAsset",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint96"
              },
              {
                "label": "lastBid",
                "type": "t_struct(Bid)6889_storage"
              },
              {
                "label": "seller",
                "type": "t_address_payable"
              },
              {
                "label": "minimalPrice",
                "type": "t_uint96"
              },
              {
                "label": "buyer",
                "type": "t_address_payable"
              },
              {
                "label": "protocolFee",
                "type": "t_uint64"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_struct(Bid)6889_storage": {
            "label": "struct AuctionHouseBase.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(IRoyaltiesProvider)8249": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
