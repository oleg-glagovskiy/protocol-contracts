/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Mint721ValidatorTest,
  Mint721ValidatorTestInterface,
} from "../../../../test/contracts/erc-721/Mint721ValidatorTest";

const _abi = [
  {
    inputs: [],
    name: "__Mint721ValidatorTest_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "tokenURI",
            type: "string",
          },
          {
            components: [
              {
                internalType: "address payable",
                name: "account",
                type: "address",
              },
              {
                internalType: "uint96",
                name: "value",
                type: "uint96",
              },
            ],
            internalType: "struct LibPart.Part[]",
            name: "creators",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address payable",
                name: "account",
                type: "address",
              },
              {
                internalType: "uint96",
                name: "value",
                type: "uint96",
              },
            ],
            internalType: "struct LibPart.Part[]",
            name: "royalties",
            type: "tuple[]",
          },
          {
            internalType: "bytes[]",
            name: "signatures",
            type: "bytes[]",
          },
        ],
        internalType: "struct LibERC721LazyMint.Mint721Data",
        name: "data",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "validateTest",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ff7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063268664601461003b578063b0b87ce714610050575b600080fd5b61004e610049366004610e27565b610058565b005b61004e6100a1565b61009d8260400151828151811061006b57fe5b6020026020010151600001516100808461014b565b8460800151848151811061009057fe5b6020026020010151610394565b5050565b600054610100900460ff16806100ba57506100ba6103a4565b806100c8575060005460ff16155b6101035760405162461bcd60e51b815260040180806020018281038252602e815260200180610f72602e913960400191505060405180910390fd5b600054610100900460ff1615801561012e576000805460ff1961ff0019909116610100171660011790555b6101366103b5565b8015610148576000805461ff00191690555b50565b60008082606001515167ffffffffffffffff8111801561016a57600080fd5b50604051908082528060200260200182016040528015610194578160200160208202803683370190505b50905060005b8360600151518110156101e6576101c7846060015182815181106101ba57fe5b6020026020010151610484565b8282815181106101d357fe5b602090810291909101015260010161019a565b50600083604001515167ffffffffffffffff8111801561020557600080fd5b5060405190808252806020026020018201604052801561022f578160200160208202803683370190505b50905060005b84604001515181101561027457610255856040015182815181106101ba57fe5b82828151811061026157fe5b6020908102919091010152600101610235565b507ff64326045af5fd7e15297ba939f85b550474d3899daa47d2bc1ffbdb9ced344e84600001518560200151805190602001208360405160200180828051906020019060200280838360005b838110156102d85781810151838201526020016102c0565b50505050905001915050604051602081830303815290604052805190602001208560405160200180828051906020019060200280838360005b83811015610329578181015183820152602001610311565b505050509050019150506040516020818303038152906040528051906020012060405160200180868152602001858152602001848152602001838152602001828152602001955050505050506040516020818303038152906040528051906020012092505050919050565b61039f8383836104f6565b505050565b60006103af3061077c565b15905090565b600054610100900460ff16806103ce57506103ce6103a4565b806103dc575060005460ff16155b6104175760405162461bcd60e51b815260040180806020018281038252602e815260200180610f72602e913960400191505060405180910390fd5b600054610100900460ff16158015610442576000805460ff1961ff0019909116610100171660011790555b610136604051806040016040528060078152602001664d696e7437323160c81b815250604051806040016040528060018152602001603160f81b815250610782565b8051602091820151604080517f397e04204c1e1a60ee8724b71f8244e10ab5f2e9009854d80f602bda21b59ebb818601526001600160a01b03909316838201526bffffffffffffffffffffffff9091166060808401919091528151808403909101815260809092019052805191012090565b600061050183610842565b9050600082516041141561051c57610519828461088e565b90505b846001600160a01b0316816001600160a01b03161461077557610547856001600160a01b031661077c565b156106fd5760408051630b135d3f60e11b808252600482018581526024830193845286516044840152865191936001600160a01b038a1693631626ba7e9388938a9390929091606490910190602085019080838360005b838110156105b657818101518382015260200161059e565b50505050905090810190601f1680156105e35780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561060157600080fd5b505afa158015610615573d6000803e3d6000fd5b505050506040513d602081101561062b57600080fd5b505160408051808201909152601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152916001600160e01b0319909116146106f75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106bc5781810151838201526020016106a4565b50505050905090810190601f1680156106e95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610775565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020808301918252925162461bcd60e51b815260048101938452825160248201528251929392839260449092019190808383600083156106bc5781810151838201526020016106a4565b5050505050565b3b151590565b600054610100900460ff168061079b575061079b6103a4565b806107a9575060005460ff16155b6107e45760405162461bcd60e51b815260040180806020018281038252602e815260200180610f72602e913960400191505060405180910390fd5b600054610100900460ff1615801561080f576000805460ff1961ff0019909116610100171660011790555b8251602080850191909120835191840191909120600191909155600255801561039f576000805461ff0019169055505050565b600061084c61090e565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600081516041146108e6576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6109048682858561094e565b9695505050505050565b60006109497f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61093c610ba4565b610944610baa565b610bb0565b905090565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156109af5760405162461bcd60e51b8152600401808060200182810382526022815260200180610f506022913960400191505060405180910390fd5b6000601e8560ff161115610a89576004850360ff16601b14806109d857506004850360ff16601c145b610a135760405162461bcd60e51b8152600401808060200182810382526022815260200180610fa06022913960400191505060405180910390fd5b6001610a1e87610c12565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610a78573d6000803e3d6000fd5b505050602060405103519050610b40565b8460ff16601b1480610a9e57508460ff16601c145b610ad95760405162461bcd60e51b8152600401808060200182810382526022815260200180610fa06022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610b33573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b038116610b9b576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b60015490565b60025490565b6000838383610bbd610c63565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b4690565b600067ffffffffffffffff831115610c7b57fe5b610c8e601f8401601f1916602001610f0d565b9050828152838383011115610ca257600080fd5b828260208301376000602084830101529392505050565b600082601f830112610cc9578081fd5b81356020610cde610cd983610f31565b610f0d565b82815281810190858301855b85811015610d28578135880189603f820112610d04578788fd5b610d158a8783013560408401610c67565b8552509284019290840190600101610cea565b5090979650505050505050565b600082601f830112610d45578081fd5b81356020610d55610cd983610f31565b82815281810190858301604080860288018501891015610d73578687fd5b865b86811015610df35781838b031215610d8b578788fd5b815182810181811067ffffffffffffffff82111715610da657fe5b835283356001600160a01b0381168114610dbe57898afd5b8152838701356bffffffffffffffffffffffff81168114610ddd57898afd5b8188015285529385019391810191600101610d75565b509198975050505050505050565b600082601f830112610e11578081fd5b610e2083833560208501610c67565b9392505050565b60008060408385031215610e39578182fd5b823567ffffffffffffffff80821115610e50578384fd5b9084019060a08287031215610e63578384fd5b610e6d60a0610f0d565b82358152602083013582811115610e82578586fd5b610e8e88828601610e01565b602083015250604083013582811115610ea5578586fd5b610eb188828601610d35565b604083015250606083013582811115610ec8578586fd5b610ed488828601610d35565b606083015250608083013582811115610eeb578586fd5b610ef788828601610cb9565b6080830152509660209590950135955050505050565b60405181810167ffffffffffffffff81118282101715610f2957fe5b604052919050565b600067ffffffffffffffff821115610f4557fe5b506020908102019056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c7565496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565a26469706673582212207821337d40694ced5df9fc0fe66fef33e2e47272a0caaf0a4069f6409e47a57b64736f6c63430007060033";

type Mint721ValidatorTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Mint721ValidatorTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mint721ValidatorTest__factory extends ContractFactory {
  constructor(...args: Mint721ValidatorTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Mint721ValidatorTest> {
    return super.deploy(overrides || {}) as Promise<Mint721ValidatorTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Mint721ValidatorTest {
    return super.attach(address) as Mint721ValidatorTest;
  }
  override connect(signer: Signer): Mint721ValidatorTest__factory {
    return super.connect(signer) as Mint721ValidatorTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Mint721ValidatorTestInterface {
    return new utils.Interface(_abi) as Mint721ValidatorTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Mint721ValidatorTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Mint721ValidatorTest;
  }
}
