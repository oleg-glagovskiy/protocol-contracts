/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MinterAccessControlTestV1,
  MinterAccessControlTestV1Interface,
} from "../../../../test/contracts/access/MinterAccessControlTestV1";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "MinterStatusChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "minter",
        type: "address",
      },
    ],
    name: "addMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "minters",
        type: "address[]",
      },
    ],
    name: "addMinters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isMinter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    name: "removeMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610949806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610168578063983b2d561461018c578063aa271e1a146101b2578063f2fde38b146101ec57610088565b80633092afd51461008d578063715018a6146100b557806371e2a657146100bd5780638129fc1c14610160575b600080fd5b6100b3600480360360208110156100a357600080fd5b50356001600160a01b0316610212565b005b6100b36102c1565b6100b3600480360360208110156100d357600080fd5b8101906020810181356401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184602083028401116401000000008311171561012257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061036d945050505050565b6100b3610455565b610170610507565b604080516001600160a01b039092168252519081900360200190f35b6100b3600480360360208110156101a257600080fd5b50356001600160a01b0316610516565b6101d8600480360360208110156101c857600080fd5b50356001600160a01b03166105ca565b604080519115158252519081900360200190f35b6100b36004803603602081101561020257600080fd5b50356001600160a01b03166105e8565b61021a6106eb565b6001600160a01b031661022b610507565b6001600160a01b031614610274576040805162461bcd60e51b815260206004820181905260248201526000805160206108f4833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260656020526040808220805460ff19169055519091907f3042b80e435ae46c334b2cfec51a66d64c9a8a8af4cd0c279a124c35a09e91dd908390a350565b6102c96106eb565b6001600160a01b03166102da610507565b6001600160a01b031614610323576040805162461bcd60e51b815260206004820181905260248201526000805160206108f4833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6103756106eb565b6001600160a01b0316610386610507565b6001600160a01b0316146103cf576040805162461bcd60e51b815260206004820181905260248201526000805160206108f4833981519152604482015290519081900360640190fd5b60005b81518110156104515760008282815181106103e957fe5b6020908102919091018101516001600160a01b038116600081815260659093526040808420805460ff1916600190811790915590519294509290917f3042b80e435ae46c334b2cfec51a66d64c9a8a8af4cd0c279a124c35a09e91dd9190a3506001016103d2565b5050565b600054610100900460ff168061046e575061046e6106ef565b8061047c575060005460ff16155b6104b75760405162461bcd60e51b815260040180806020018281038252602e8152602001806108c6602e913960400191505060405180910390fd5b600054610100900460ff161580156104e2576000805460ff1961ff0019909116610100171660011790555b6104ea610700565b6104f26107f9565b8015610504576000805461ff00191690555b50565b6033546001600160a01b031690565b61051e6106eb565b6001600160a01b031661052f610507565b6001600160a01b031614610578576040805162461bcd60e51b815260206004820181905260248201526000805160206108f4833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260656020526040808220805460ff1916600190811790915590519092917f3042b80e435ae46c334b2cfec51a66d64c9a8a8af4cd0c279a124c35a09e91dd91a350565b6001600160a01b031660009081526065602052604090205460ff1690565b6105f06106eb565b6001600160a01b0316610601610507565b6001600160a01b03161461064a576040805162461bcd60e51b815260206004820181905260248201526000805160206108f4833981519152604482015290519081900360640190fd5b6001600160a01b03811661068f5760405162461bcd60e51b81526004018080602001828103825260268152602001806108a06026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60006106fa30610899565b15905090565b600054610100900460ff168061071957506107196106ef565b80610727575060005460ff16155b6107625760405162461bcd60e51b815260040180806020018281038252602e8152602001806108c6602e913960400191505060405180910390fd5b600054610100900460ff1615801561078d576000805460ff1961ff0019909116610100171660011790555b60006107976106eb565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610504576000805461ff001916905550565b600054610100900460ff168061081257506108126106ef565b80610820575060005460ff16155b61085b5760405162461bcd60e51b815260040180806020018281038252602e8152602001806108c6602e913960400191505060405180910390fd5b600054610100900460ff161580156104f2576000805460ff1961ff0019909116610100171660011790558015610504576000805461ff001916905550565b3b15159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d645481ddee92ef498a3f02d4fda6374dc1051d82115086bddce685d62039c9164736f6c63430007060033";

type MinterAccessControlTestV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterAccessControlTestV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinterAccessControlTestV1__factory extends ContractFactory {
  constructor(...args: MinterAccessControlTestV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MinterAccessControlTestV1> {
    return super.deploy(overrides || {}) as Promise<MinterAccessControlTestV1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MinterAccessControlTestV1 {
    return super.attach(address) as MinterAccessControlTestV1;
  }
  override connect(signer: Signer): MinterAccessControlTestV1__factory {
    return super.connect(signer) as MinterAccessControlTestV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterAccessControlTestV1Interface {
    return new utils.Interface(_abi) as MinterAccessControlTestV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MinterAccessControlTestV1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MinterAccessControlTestV1;
  }
}
