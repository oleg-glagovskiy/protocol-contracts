/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MinterAccessControlTestV2,
  MinterAccessControlTestV2Interface,
} from "../../../../test/contracts/access/MinterAccessControlTestV2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "MinterStatusChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "V2",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "minter",
        type: "address",
      },
    ],
    name: "addMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "minters",
        type: "address[]",
      },
    ],
    name: "addMinters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isMinter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    name: "removeMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109d4806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101a357806396cd25ef146101c7578063983b2d56146101cf578063aa271e1a146101f5578063f2fde38b1461022f5761009e565b80633092afd5146100a357806354fd4d50146100cb578063715018a6146100f057806371e2a657146100f85780638129fc1c1461019b575b600080fd5b6100c9600480360360208110156100b957600080fd5b50356001600160a01b0316610255565b005b6100d3610304565b604080516001600160e01b03199092168252519081900360200190f35b6100c9610328565b6100c96004803603602081101561010e57600080fd5b81019060208101813564010000000081111561012957600080fd5b82018360208201111561013b57600080fd5b8035906020019184602083028401116401000000008311171561015d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506103d4945050505050565b6100c96104bc565b6101ab61056e565b604080516001600160a01b039092168252519081900360200190f35b6100d361057d565b6100c9600480360360208110156101e557600080fd5b50356001600160a01b03166105a1565b61021b6004803603602081101561020b57600080fd5b50356001600160a01b0316610655565b604080519115158252519081900360200190f35b6100c96004803603602081101561024557600080fd5b50356001600160a01b0316610673565b61025d610776565b6001600160a01b031661026e61056e565b6001600160a01b0316146102b7576040805162461bcd60e51b8152602060048201819052602482015260008051602061097f833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260656020526040808220805460ff19169055519091907f3042b80e435ae46c334b2cfec51a66d64c9a8a8af4cd0c279a124c35a09e91dd908390a350565b7f23d235efaf569b2b407d10f447247743508d1762a8e3a3aed85ccc0570dde35f90565b610330610776565b6001600160a01b031661034161056e565b6001600160a01b03161461038a576040805162461bcd60e51b8152602060048201819052602482015260008051602061097f833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6103dc610776565b6001600160a01b03166103ed61056e565b6001600160a01b031614610436576040805162461bcd60e51b8152602060048201819052602482015260008051602061097f833981519152604482015290519081900360640190fd5b60005b81518110156104b857600082828151811061045057fe5b6020908102919091018101516001600160a01b038116600081815260659093526040808420805460ff1916600190811790915590519294509290917f3042b80e435ae46c334b2cfec51a66d64c9a8a8af4cd0c279a124c35a09e91dd9190a350600101610439565b5050565b600054610100900460ff16806104d557506104d561077a565b806104e3575060005460ff16155b61051e5760405162461bcd60e51b815260040180806020018281038252602e815260200180610951602e913960400191505060405180910390fd5b600054610100900460ff16158015610549576000805460ff1961ff0019909116610100171660011790555b61055161078b565b610559610884565b801561056b576000805461ff00191690555b50565b6033546001600160a01b031690565b7f23d235efaf569b2b407d10f447247743508d1762a8e3a3aed85ccc0570dde35f81565b6105a9610776565b6001600160a01b03166105ba61056e565b6001600160a01b031614610603576040805162461bcd60e51b8152602060048201819052602482015260008051602061097f833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260656020526040808220805460ff1916600190811790915590519092917f3042b80e435ae46c334b2cfec51a66d64c9a8a8af4cd0c279a124c35a09e91dd91a350565b6001600160a01b031660009081526065602052604090205460ff1690565b61067b610776565b6001600160a01b031661068c61056e565b6001600160a01b0316146106d5576040805162461bcd60e51b8152602060048201819052602482015260008051602061097f833981519152604482015290519081900360640190fd5b6001600160a01b03811661071a5760405162461bcd60e51b815260040180806020018281038252602681526020018061092b6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600061078530610924565b15905090565b600054610100900460ff16806107a457506107a461077a565b806107b2575060005460ff16155b6107ed5760405162461bcd60e51b815260040180806020018281038252602e815260200180610951602e913960400191505060405180910390fd5b600054610100900460ff16158015610818576000805460ff1961ff0019909116610100171660011790555b6000610822610776565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561056b576000805461ff001916905550565b600054610100900460ff168061089d575061089d61077a565b806108ab575060005460ff16155b6108e65760405162461bcd60e51b815260040180806020018281038252602e815260200180610951602e913960400191505060405180910390fd5b600054610100900460ff16158015610559576000805460ff1961ff001990911661010017166001179055801561056b576000805461ff001916905550565b3b15159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122034016915c390f4cc8bc1ffe09f37d666022959e8c31d8a05c439dcddebdff31264736f6c63430007060033";

type MinterAccessControlTestV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterAccessControlTestV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinterAccessControlTestV2__factory extends ContractFactory {
  constructor(...args: MinterAccessControlTestV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MinterAccessControlTestV2> {
    return super.deploy(overrides || {}) as Promise<MinterAccessControlTestV2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MinterAccessControlTestV2 {
    return super.attach(address) as MinterAccessControlTestV2;
  }
  override connect(signer: Signer): MinterAccessControlTestV2__factory {
    return super.connect(signer) as MinterAccessControlTestV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterAccessControlTestV2Interface {
    return new utils.Interface(_abi) as MinterAccessControlTestV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MinterAccessControlTestV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MinterAccessControlTestV2;
  }
}
