/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  TestERC1271,
  TestERC1271Interface,
} from "../../../../../@rarible/lib-signature/test/contracts/TestERC1271";

const _abi = [
  {
    inputs: [],
    name: "ERC1271_INTERFACE_ID",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ERC1271_RETURN_INVALID_SIGNATURE",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ERC1271_RETURN_VALID_SIGNATURE",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setReturnSuccessfulValidSignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806311a5e4091461005c5780631626ba7e146100815780631ce301811461012e5780639890cdca14610136578063a85a89f81461013e575b600080fd5b61006461015f565b604080516001600160e01b03199092168252519081900360200190f35b6100646004803603604081101561009757600080fd5b813591908101906040810160208201356401000000008111156100b957600080fd5b8201836020820111156100cb57600080fd5b803590602001918460018302840111640100000000831117156100ed57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061016a945050505050565b61006461018c565b610064610191565b61015d6004803603602081101561015457600080fd5b5035151561019c565b005b63fb855dc960e01b81565b6000805460ff1661017c576000610185565b630b135d3f60e11b5b9392505050565b600081565b630b135d3f60e11b81565b6000805460ff191691151591909117905556fea2646970667358221220e4dde9446f1e65c6d63be127171c57a681988d45390e65a4e395daf146b7005264736f6c63430007060033";

type TestERC1271ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC1271ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC1271__factory extends ContractFactory {
  constructor(...args: TestERC1271ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC1271> {
    return super.deploy(overrides || {}) as Promise<TestERC1271>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestERC1271 {
    return super.attach(address) as TestERC1271;
  }
  override connect(signer: Signer): TestERC1271__factory {
    return super.connect(signer) as TestERC1271__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC1271Interface {
    return new utils.Interface(_abi) as TestERC1271Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC1271 {
    return new Contract(address, _abi, signerOrProvider) as TestERC1271;
  }
}
