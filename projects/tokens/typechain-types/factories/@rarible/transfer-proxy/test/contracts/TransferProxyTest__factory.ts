/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  TransferProxyTest,
  TransferProxyTestInterface,
} from "../../../../../@rarible/transfer-proxy/test/contracts/TransferProxyTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC1155Upgradeable",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "erc1155safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721Upgradeable",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "erc721safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610297806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639c1c2ee91461003b578063f709b906146100da575b600080fd5b6100d8600480360360c081101561005157600080fd5b6001600160a01b038235811692602081013582169260408201359092169160608201359160808101359181019060c0810160a082013564010000000081111561009957600080fd5b8201836020820111156100ab57600080fd5b803590602001918460018302840111640100000000831117156100cd57600080fd5b509092509050610116565b005b6100d8600480360360808110156100f057600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356101db565b866001600160a01b031663f242432a8787878787876040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b1580156101ba57600080fd5b505af11580156101ce573d6000803e3d6000fd5b5050505050505050505050565b836001600160a01b03166342842e0e8484846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561024357600080fd5b505af1158015610257573d6000803e3d6000fd5b505050505050505056fea26469706673582212200366d4ac55aeee15e5f4973b969d8f395be16ec8f4286cb4cdc79f6dfcd4d51a64736f6c63430007060033";

type TransferProxyTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransferProxyTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransferProxyTest__factory extends ContractFactory {
  constructor(...args: TransferProxyTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TransferProxyTest> {
    return super.deploy(overrides || {}) as Promise<TransferProxyTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TransferProxyTest {
    return super.attach(address) as TransferProxyTest;
  }
  override connect(signer: Signer): TransferProxyTest__factory {
    return super.connect(signer) as TransferProxyTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransferProxyTestInterface {
    return new utils.Interface(_abi) as TransferProxyTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransferProxyTest {
    return new Contract(address, _abi, signerOrProvider) as TransferProxyTest;
  }
}
