/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface LibAssetInterface extends utils.Interface {
  functions: {
    "COLLECTION()": FunctionFragment;
    "CRYPTO_PUNKS()": FunctionFragment;
    "ERC1155_ASSET_CLASS()": FunctionFragment;
    "ERC20_ASSET_CLASS()": FunctionFragment;
    "ERC721_ASSET_CLASS()": FunctionFragment;
    "ETH_ASSET_CLASS()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COLLECTION"
      | "CRYPTO_PUNKS"
      | "ERC1155_ASSET_CLASS"
      | "ERC20_ASSET_CLASS"
      | "ERC721_ASSET_CLASS"
      | "ETH_ASSET_CLASS"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COLLECTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTO_PUNKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155_ASSET_CLASS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_ASSET_CLASS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_ASSET_CLASS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_ASSET_CLASS",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "COLLECTION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTO_PUNKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155_ASSET_CLASS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC20_ASSET_CLASS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_ASSET_CLASS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_ASSET_CLASS",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibAsset extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibAssetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COLLECTION(overrides?: CallOverrides): Promise<[string]>;

    CRYPTO_PUNKS(overrides?: CallOverrides): Promise<[string]>;

    ERC1155_ASSET_CLASS(overrides?: CallOverrides): Promise<[string]>;

    ERC20_ASSET_CLASS(overrides?: CallOverrides): Promise<[string]>;

    ERC721_ASSET_CLASS(overrides?: CallOverrides): Promise<[string]>;

    ETH_ASSET_CLASS(overrides?: CallOverrides): Promise<[string]>;
  };

  COLLECTION(overrides?: CallOverrides): Promise<string>;

  CRYPTO_PUNKS(overrides?: CallOverrides): Promise<string>;

  ERC1155_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;

  ERC20_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;

  ERC721_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;

  ETH_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    COLLECTION(overrides?: CallOverrides): Promise<string>;

    CRYPTO_PUNKS(overrides?: CallOverrides): Promise<string>;

    ERC1155_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;

    ERC20_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;

    ERC721_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;

    ETH_ASSET_CLASS(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    COLLECTION(overrides?: CallOverrides): Promise<BigNumber>;

    CRYPTO_PUNKS(overrides?: CallOverrides): Promise<BigNumber>;

    ERC1155_ASSET_CLASS(overrides?: CallOverrides): Promise<BigNumber>;

    ERC20_ASSET_CLASS(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_ASSET_CLASS(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_ASSET_CLASS(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLECTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CRYPTO_PUNKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC1155_ASSET_CLASS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC20_ASSET_CLASS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC721_ASSET_CLASS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETH_ASSET_CLASS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
