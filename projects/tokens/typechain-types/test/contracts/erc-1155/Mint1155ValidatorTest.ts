/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibPart {
  export type PartStruct = {
    account: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export declare namespace LibERC1155LazyMint {
  export type Mint1155DataStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    supply: PromiseOrValue<BigNumberish>;
    creators: LibPart.PartStruct[];
    royalties: LibPart.PartStruct[];
    signatures: PromiseOrValue<BytesLike>[];
  };

  export type Mint1155DataStructOutput = [
    BigNumber,
    string,
    BigNumber,
    LibPart.PartStructOutput[],
    LibPart.PartStructOutput[],
    string[]
  ] & {
    tokenId: BigNumber;
    tokenURI: string;
    supply: BigNumber;
    creators: LibPart.PartStructOutput[];
    royalties: LibPart.PartStructOutput[];
    signatures: string[];
  };
}

export interface Mint1155ValidatorTestInterface extends utils.Interface {
  functions: {
    "__Mint1155ValidatorTest_init()": FunctionFragment;
    "validateTest(address,(uint256,string,uint256,(address,uint96)[],(address,uint96)[],bytes[]),uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "__Mint1155ValidatorTest_init" | "validateTest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Mint1155ValidatorTest_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateTest",
    values: [
      PromiseOrValue<string>,
      LibERC1155LazyMint.Mint1155DataStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Mint1155ValidatorTest_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Mint1155ValidatorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Mint1155ValidatorTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Mint1155ValidatorTest_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTest(
      sender: PromiseOrValue<string>,
      data: LibERC1155LazyMint.Mint1155DataStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  __Mint1155ValidatorTest_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTest(
    sender: PromiseOrValue<string>,
    data: LibERC1155LazyMint.Mint1155DataStruct,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    __Mint1155ValidatorTest_init(overrides?: CallOverrides): Promise<void>;

    validateTest(
      sender: PromiseOrValue<string>,
      data: LibERC1155LazyMint.Mint1155DataStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    __Mint1155ValidatorTest_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTest(
      sender: PromiseOrValue<string>,
      data: LibERC1155LazyMint.Mint1155DataStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Mint1155ValidatorTest_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTest(
      sender: PromiseOrValue<string>,
      data: LibERC1155LazyMint.Mint1155DataStruct,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
